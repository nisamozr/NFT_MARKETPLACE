[{"/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/index.js":"1","/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/App.js":"2","/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/reportWebVitals.js":"3","/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/config.js":"4","/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/context/web3.js":"5","/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/pages/Home.jsx":"6","/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/pages/Explore.jsx":"7","/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/pages/Collection.jsx":"8","/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/pages/Error.jsx":"9","/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/pages/Create.jsx":"10","/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/pages/Nft.jsx":"11","/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/components/Navbar.jsx":"12","/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/components/CardSales.jsx":"13","/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/components/Card.jsx":"14","/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/pages/Sell.jsx":"15","/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/pages/creater.jsx":"16"},{"size":479,"mtime":1643303229717,"results":"17","hashOfConfig":"18"},{"size":3634,"mtime":1644049510867,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1643303229717,"results":"20","hashOfConfig":"18"},{"size":280,"mtime":1644211467562,"results":"21","hashOfConfig":"18"},{"size":82,"mtime":1643303229697,"results":"22","hashOfConfig":"18"},{"size":1247,"mtime":1643374965183,"results":"23","hashOfConfig":"18"},{"size":2526,"mtime":1644139268027,"results":"24","hashOfConfig":"18"},{"size":2175,"mtime":1643898427907,"results":"25","hashOfConfig":"18"},{"size":404,"mtime":1643303229717,"results":"26","hashOfConfig":"18"},{"size":5155,"mtime":1644041755751,"results":"27","hashOfConfig":"18"},{"size":9081,"mtime":1644139940353,"results":"28","hashOfConfig":"18"},{"size":3919,"mtime":1643995829853,"results":"29","hashOfConfig":"18"},{"size":531,"mtime":1643898881599,"results":"30","hashOfConfig":"18"},{"size":843,"mtime":1643545000712,"results":"31","hashOfConfig":"18"},{"size":5912,"mtime":1643944145503,"results":"32","hashOfConfig":"18"},{"size":2401,"mtime":1643898439739,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1lmqe2g",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"36"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/index.js",[],["73","74"],"/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/App.js",["75","76","77","78"],"/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/reportWebVitals.js",[],"/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/config.js",[],"/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/context/web3.js",[],"/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/pages/Home.jsx",["79","80","81"],"import React, { useState, useContext, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport '../style/Home.css'\n\n\nfunction Home() {\n\n  return (\n    <div className=\"container\">\n     \n        <div className=\"\">\n        <div className=\"row feeld\">\n          <div className=\"col-md-6 co-sm-12\">\n            <div className=\"feeld-left\">\n              <div className=\"black\">\n                <div className=\"blankPhoto\">\n                  <img src=\"./w.jpg\" alt=\"\" />\n                </div>\n              </div>\n            </div>\n          </div>\n          <dic className=\"col-md-6\">\n            <div className=\"feeld-right\">\n              <div className=\"f\">\n                <div className=\"dis\">Mint your own NFT's on one click </div>\n                <div className=\"but\">\n                  <Link to=\"/create\">\n                    {' '}\n                    <button className=\"btn1 e\">Create</button>{' '}\n                  </Link>\n                  <Link to=\"/explore\">\n                    {' '}\n                    <button className=\"btn2 e\">Explore</button>\n                  </Link>\n                </div>\n              </div>\n            </div>\n          </dic>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n","/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/pages/Explore.jsx",["82","83","84","85","86"],"/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/pages/Collection.jsx",["87","88","89","90","91","92","93"],"import React, { useState, useEffect, useContext } from 'react'\nimport Card from '../components/CardSales'\nimport axios from 'axios'\nimport { ethers } from 'ethers'\nimport { web3Provider } from '../context/web3'\nimport { nftaddress } from '../config'\nimport { useNavigate } from \"react-router-dom\"\n\n\nfunction Collection() {\n  const route = useNavigate();\n  const [sellPrice, setSells] = useState(null)\n  const [nfts, setNfts] = useState([])\n  const {\n    connection,\n    signer,\n    nftMarketplaceContract,\n    nftContract,\n  } = useContext(web3Provider)\n\n  useEffect(() => {\n    loadNFT()\n\n  }, [])\n\n  async function loadNFT() {\n    const data = await nftMarketplaceContract.fetchMyNFTs()\n    const items = await Promise.all(\n      data.map(async (i) => {\n        let tockenid = i.tokenId\n        let id = tockenid.toNumber()\n        const tokenUri = await nftContract.tokenURI(id)\n        const meta = await axios.get(tokenUri)\n        let price = ethers.utils.formatUnits(i.price.toString(), 'ether')\n        let item = {\n          price,\n          marketId: i.itemId.toNumber(),\n          tokenId: i.tokenId.toNumber(),\n          seller: i.seller,\n          owner: i.owner,\n          image: meta.data.image,\n          name: meta.data.name,\n          description: meta.data.description,\n        }\n        return item\n      }),\n    )\n    setNfts(items)\n  }\n\n\n  return (\n    <div className=\"news\">\n      <div className=\"collotion\">\n        <div className=\"container\">\n          <h3>My NFT Collection</h3>\n          <div className=\"row\">\n            {\n              (connection == null) ? <div className='connectWalletWarring'>Please connect with wallet</div> : (nfts.length == 0) ? <div className='connectWalletWarring'>You not owned any NFT's</div> : nfts.map((nfts, i) => (\n                <Card\n                  key={i}\n                  price={nfts.price}\n                  name={nfts.name}\n                  tokenId={nfts.tokenId}\n                  image={nfts.image}\n                  marketId={nfts.marketId}\n                  \n                />\n              ))\n            }\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Collection\n","/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/pages/Error.jsx",[],"/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/pages/Create.jsx",["94","95","96","97","98"],"import React, { useRef, useState, useEffect, useContext } from 'react'\nimport { useNavigate } from \"react-router-dom\"\nimport { ethers } from 'ethers'\nimport { create as ipfsHttpClient } from \"ipfs-http-client\"\nimport { web3Provider } from '../context/web3'\nimport { Buffer } from 'buffer';\nimport '../style/Create.css'\nimport { projectId, projectSecret } from \"../config\"\n\nconst auth = 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64')\n\nconst client = ipfsHttpClient(\n  {\n    host: 'ipfs.infura.io',\n    port: 5001,\n    protocol: 'https',\n    headers: {\n      authorization: auth\n    }\n  }\n)\n\nfunction Create() {\n  const route = useNavigate();\n  const { connection, signer, nftMarketplaceContract, nftContract } = useContext(web3Provider)\n  const fileRef = useRef(null)\n  const [image, setImage] = useState()\n  const [selecfile, setselecfile] = useState(null)\n  const [fileUrl, setFileUrl] = useState(null)\n  const [sell, setSell] = useState(null)\n\n \n  const [formInput, updateFormInput] = useState({ price: '', name: '', description: '' })\n\n  const ButtonClic = () => {\n    fileRef.current.click()\n  }\n\n  const handleChange = async (e) => {\n    const { files } = e.target\n    if (e.target.files[0]) {\n      setselecfile(e.target.files[0])\n      const reader = new FileReader()\n      reader.addEventListener('load', () => {\n        setImage(reader.result)\n      })\n      reader.readAsDataURL(e.target.files[0])\n\n      const filed = e.target.files[0]\n      try {\n        const added = await client.add(filed\n        )\n        console.log(added)\n        const url = `https://ipfs.io/ipfs/${added.path}`\n        setFileUrl(url)\n      } catch (error) {\n        console.log('Error uploading file: ', error)\n      }\n    }\n  }\n\n  const createMarketitem = async () => {\n    const { name, description, price } = formInput\n\n    if (!name || !description || !price || !fileUrl) return\n\n    const data = JSON.stringify({\n      name, description, image: fileUrl\n    })\n\n    try {\n      const added = await client.add(data)\n      console.log(added)\n      const url = `https://ipfs.io/ipfs/${added.path}`\n      createSale(url)\n    } catch (error) {\n      console.log('Error uploading file: ', error)\n    }\n  }\n\n  async function createSale(url) {\n    let contract = nftContract\n    let transaction = await contract.createToken(url)\n    let tx = await transaction.wait()\n    let event = tx.events[0]\n    let value = event.args[2]\n    let tokenId = value.toNumber()\n    const price = ethers.utils.parseUnits(formInput.price, 'ether')\n    contract = nftMarketplaceContract;\n    let listingPrice = await contract.getListingPrice()\n    listingPrice = listingPrice.toString()\n\n    transaction = await contract.createMarketplace(nftContract.address, tokenId, price, sell, { value: listingPrice })\n    await transaction.wait()\n    route('/explore')\n  }\n\n  return (\n    <div className=\"new\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <h2>Create NFT</h2>\n          </div>\n        </div>\n        <hr />\n        <div className=\"containers\">\n          <div>\n            <h4>Upload Artwork</h4>\n            <div className=\"artbox\">\n              {image ? (\n                <img src={image} alt=\"\" />\n              ) : (\n                <button onClick={ButtonClic}>Add Artwork</button>\n              )}\n\n              <input\n                ref={fileRef}\n                onChange={handleChange}\n                multiple={false}\n                hidden\n                type=\"file\"\n                name=\"\"\n                id=\"\"\n              />\n            </div>\n          </div>\n          <div className=\"disc\">\n            <h4>Artwork Details</h4>\n            <div>\n              <input type=\"text\" placeholder=\"Artwork Name\" name=\"\" id=\"\" onChange={e => updateFormInput({ ...formInput, name: e.target.value })} />\n            </div>\n            <div>\n              <textarea\n                name=\"\"\n                id=\"\"\n                placeholder=\"Artwork Description\"\n                cols=\"\"\n                onChange={e => updateFormInput({ ...formInput, description: e.target.value })}\n                rows=\"4\"\n              ></textarea>\n            </div>\n\n\n            <div className=\"typeButton\">\n              <div className=\"col-6\">\n                <button className={sell ? 'l': ' l activeFocus'} onClick={() => {\n                  setSell(false)\n                \n                }}>Fixed price</button>\n              </div>\n              <div className=\"col-6\">\n                <button className={sell ? 'r activeFocus':'r'} onClick={() => {\n                 setSell(true)\n                }}> Time Auction</button>\n              </div>\n            </div>\n          {/* </div> */}\n\n          <div>\n            <input type=\"number\" placeholder={sell ? \"Staring Price\" :\"Price\"} name=\"\" id=\"\" onChange={e => updateFormInput({ ...formInput, price: e.target.value })} />\n          </div>\n        </div>\n        <div>\n          <button className=\"mintbuttun\" onClick={createMarketitem}>Create</button>\n        </div>\n      </div>\n    </div>\n    </div >\n  )\n}\n\nexport default Create\n","/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/pages/Nft.jsx",["99","100","101","102","103","104","105","106","107"],"/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/components/Navbar.jsx",["108"],"import React, { useState, useContext } from 'react'\nimport \"../style/Navbar.css\"\nimport { Link, NavLink } from \"react-router-dom\"\nimport { web3Provider } from '../context/web3'\n\nfunction Navbar({ connet, account }) {\n\n    const {\n        connection,\n        Balance\n    } = useContext(web3Provider)\n\n\n    const [click, setclick] = useState(false)\n    const [clickdropdown, setclickdropdawn] = useState(false)\n    function handleClick() {\n        setclick(!click)\n    }\n    const dropdown = () => {\n        connet()\n        setclickdropdawn(!clickdropdown)\n\n    }\n\n    return (\n        <div className=\"bo\">\n\n            <div className=\"nav\">\n\n\n                <div className=\"Navbar\">\n                    <div className=\"log\">\n                        <img src=\"./NFT_Icon.png\" alt=\"\" />\n                    </div>\n                    <div className=\"\" className={click ? \"active navbarDetails\" : \"navbarDetails \"}>\n                        {/* <div className=\"serch\">\n                    <div className=\"inputSertch\">\n                        <input type=\"text\" name=\"\" placeholder=\"Search\" id=\"\" />\n                    </div>\n                    <div className=\"serchButton\">\n                    <i className=\"fas fa-search\"></i>\n                    </div>\n                </div> */}\n                        <ul className=\"link\">\n                            <li> <NavLink to=\"/\" className={({ isActive }) => (isActive ? 'active' : 'link')} activeStyle={{ color: 'red' }}>Home</NavLink></li>\n                            <li><NavLink to=\"/explore\" className={({ isActive }) => (isActive ? 'active' : 'link')}>Explore </NavLink></li>\n                            <li><NavLink to=\"/mycollection\" className={({ isActive }) => (isActive ? 'active' : 'link')}>My Collection </NavLink></li>\n                           \n\n                        </ul>\n                        <Link to=\"/create\" className=\"btn1\">Create</Link>\n\n\n                        <div class=\"dropdown\">\n                            {/* <button onclick=\"myFunction()\" class=\"dropbtn\">Dropdown</button> */}\n                            <button className=\"btn2 connect\" onClick={(connection == null) ? connet : dropdown} >{account ? account : \"Connect Wallet\"}</button>\n                            <div id=\"myDropdown\" class={clickdropdown ? \"dropdown-content show\" : \"dropdown-content \"}>\n                                <p>ETH : {Balance}</p>\n                                {/* <button>Disconnect</button> */}\n\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"menu\">\n\n                        <button className=\"btn2 connect ss\" onClick={connet}>{account ? account : \"Connect Wallet\"}>Connect Wallet</button>\n                        <i onClick={handleClick} class={click ? \"fas fa-times\" : \"fas fa-bars\"}></i>\n                    </div>\n\n                </div>\n            </div>\n            <div className={click ? \"side active\" : \"hide\"}>\n                <div className=\"menuside\">\n                    <ul className=\"linkside\">\n                        <li onClick={handleClick}> <NavLink to=\"/\" className={({ isActive }) => (isActive ? 'active' : 'link')} activeStyle={{ color: 'red' }}>Home</NavLink></li>\n                        <li onClick={handleClick}><NavLink to=\"/explore\" className={({ isActive }) => (isActive ? 'active' : 'link')}>Explore </NavLink></li>\n                        <li onClick={handleClick}><NavLink to=\"/mycollection\" className={({ isActive }) => (isActive ? 'active' : 'link')}>My Collection </NavLink></li>\n                        <li onClick={handleClick}> <Link to=\"/mint\" className=\"btn1\">Create</Link></li>\n                        {/* <li onClick={handleClick}> <button className=\"btn2 connect\">Connect Wallet</button></li> */}\n\n                    </ul>\n\n\n\n\n                </div>\n\n            </div>\n\n\n        </div>\n    )\n}\n\nexport default Navbar\n","/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/components/CardSales.jsx",["109"],"import React ,{useState} from 'react'\nimport {Link} from \"react-router-dom\"\nimport \"../style/Card.css\"\n\nfunction Card({image,tokenId,name,view}) {\n    \n  \n    return (\n        <div className=\" col-md-12 col-lg-4  \">\n            <div className=\"card\">\n            <Link to={`/view/my/${tokenId}` }> \n            <div className=\"card-innerbox\">\n                <img src={image} alt=\"\" />\n                <h3>{name} #{tokenId}</h3>\n            </div>\n            </Link>\n            </div>\n        </div>\n    )\n}\n\nexport default Card\n","/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/components/Card.jsx",[],"/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/pages/Sell.jsx",["110","111"],"import React, { useState, useEffect, useContext } from 'react'\nimport \"../style/nft.css\"\nimport { useParams } from \"react-router-dom\"\nimport { web3Provider } from \"../context/web3\"\nimport axios from \"axios\"\nimport { ethers } from \"ethers\"\nimport { useNavigate } from \"react-router-dom\"\nimport { nftaddress } from '../config'\nimport \"../style/sell.css\"\n\nfunction Sell() {\n  const route = useNavigate();\n  const {\n    nftMarketplaceContract,\n    nftContract,\n  } = useContext(web3Provider)\n  let { id, view } = useParams()\n  const [nft, setNft] = useState({})\n  const [fixedSell, setfixedSell] = useState(true)\n  const [auctionSell, setActionSell] = useState()\n  const [prices, setPrice] = useState(0);\n\n  useEffect(() => {\n    loadNFT()\n  })\n\n  async function loadNFT() {\n  \n    const data = await nftMarketplaceContract.fetchMyNFTs()\n    await Promise.all(\n      data.map(async (i) => {\n        let tockenid = i.tokenId\n        if (tockenid.toString() === id) {\n          let id = tockenid.toNumber()\n          const tokenUri = await nftContract.tokenURI(id)\n          const meta = await axios.get(tokenUri)\n          let price = ethers.utils.formatUnits(i.price.toString(), 'ether')\n          let item = {\n            itemId: i.itemId.toNumber(),\n            price,\n            priceInbign: i.price,\n            tokenId: i.tokenId.toNumber(),\n            seller: i.seller,\n            owner: i.owner,\n            image: meta.data.image,\n            name: meta.data.name,\n            description: meta.data.description,\n          }\n          setNft(item)\n          return item\n        }\n      }),\n    )\n  }\n\n\n\n  const [sellPrice, setSells] = useState(null)\n\n  const setSellerAndsell = () => {\n    \n    setSells({ price: nft.price, id: nft.itemId })\n \n    sell( nft.itemId )\n\n  }\n\n  const sell = async ( itemId) => {\n    await nftContract.approv()\n    let listingPrice = await nftMarketplaceContract.getListingPrice()\n    listingPrice = listingPrice.toString()\n    const price = ethers.utils.parseUnits(prices, 'ether')\n    const buy = await nftMarketplaceContract.sellMarketplace(nftaddress, itemId, price, { value: listingPrice })\n    await buy.wait()\n    route('/explore')\n  }\n  const auction = async ()=>{\n    console.log(\"fsd\")\n    let listingPrice = await nftMarketplaceContract.getListingPrice()\n    listingPrice = listingPrice.toString()\n    const price = ethers.utils.parseUnits(prices, 'ether')\n    const actions = await nftMarketplaceContract.createAuction(nftaddress, nft.itemId, price, {value: listingPrice})\n    await actions.wait()\n    route('/explore')\n  }\n\n  return (\n    <div className=\"new\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-7\">\n            <div className=\"box-left\">\n              <h3>List item for sale</h3>\n              <div className=\"type\">\n                Type\n                <div className=\"typeButton\">\n                  <div className=\"col-6\">\n                    <button className='l' onClick={() => {\n                      setfixedSell(true)\n                      setActionSell(false)\n                    }}>Fixed price</button>\n                  </div>\n                  <div className=\"col-6\">\n                    <button className='r' onClick={() => {\n                      setActionSell(true)\n                      setfixedSell(false)\n                    }}> Time Auction</button>\n                  </div>\n                </div>\n              </div>\n              {/* fixed price */}\n              <div className={fixedSell ? \"fixedPricee\" : \" displaynon\"} >\n                <div className=\"price\">\n                  Price\n                  <div className=\"priceBox\">\n                    <div className=\"priceboxLeft\">\n                      <img src=\"https://ipfs.io/ipfs/QmVkyAQYxwJWz1441BeZeiNTFgEcmpk2wMaaiCxbybkfpc\" alt=\"\" />\n                      ETH\n                    </div>\n                    <div className=\"priceboxRight\">\n                      <input type=\"text\" onChange={e => setPrice(e.target.value)} placeholder='Amount' />\n                    </div>\n                  </div>\n                </div>\n                <hr />\n                <button className='sell' onClick={setSellerAndsell}>Sell</button>\n              </div>\n\n              {/* auction */}\n              <div className={auctionSell ? \"auction\" : \" displaynon\"} >\n                <div className=\"price\">\n                  Starting price\n                  <div className=\"priceBox\">\n                    <div className=\"priceboxLeft\">\n                      <img src=\"https://ipfs.io/ipfs/QmVkyAQYxwJWz1441BeZeiNTFgEcmpk2wMaaiCxbybkfpc\" alt=\"\" />\n                      ETH\n                    </div>\n                    <div className=\"priceboxRight\">\n                      <input type=\"text\" placeholder='Amount' onChange={e => setPrice(e.target.value)} />\n                    </div>\n                  </div>\n                </div>\n                <hr />\n                <button className='sell' onClick={auction} >Auction</button>\n              </div>\n\n\n            </div>\n\n          </div>\n          <div className=\"col-md-5\">\n            <div className=\"imageprive\">\n              Priview\n              <div className=\"imagePreviewCard\">\n                <div className=\"image_box\">\n                  <img src={nft.image} alt=\"\" />\n                </div>\n                <div className=\"img_details\">\n                  <div>\n                    <b>{nft.name} #{id}</b>\n                  </div>\n                  <div>\n                    Price\n                    <div className=\"priceimg\">\n                      <img src=\"https://ipfs.io/ipfs/QmVkyAQYxwJWz1441BeZeiNTFgEcmpk2wMaaiCxbybkfpc\" alt=\"\" />\n                      {prices}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Sell\n","/home/nisamdheen/sps/NFT_MARKETPLACE/client/src/pages/creater.jsx",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":2,"column":17,"nodeType":"118","messageId":"119","endLine":2,"endColumn":26},{"ruleId":"116","severity":1,"message":"120","line":9,"column":50,"nodeType":"118","messageId":"119","endLine":9,"endColumn":54},{"ruleId":"116","severity":1,"message":"121","line":20,"column":8,"nodeType":"118","messageId":"119","endLine":20,"endColumn":15},{"ruleId":"116","severity":1,"message":"122","line":24,"column":10,"nodeType":"118","messageId":"119","endLine":24,"endColumn":22},{"ruleId":"116","severity":1,"message":"123","line":1,"column":17,"nodeType":"118","messageId":"119","endLine":1,"endColumn":25},{"ruleId":"116","severity":1,"message":"124","line":1,"column":27,"nodeType":"118","messageId":"119","endLine":1,"endColumn":37},{"ruleId":"116","severity":1,"message":"117","line":1,"column":39,"nodeType":"118","messageId":"119","endLine":1,"endColumn":48},{"ruleId":"116","severity":1,"message":"125","line":13,"column":5,"nodeType":"118","messageId":"119","endLine":13,"endColumn":11},{"ruleId":"116","severity":1,"message":"126","line":18,"column":10,"nodeType":"118","messageId":"119","endLine":18,"endColumn":17},{"ruleId":"116","severity":1,"message":"127","line":18,"column":19,"nodeType":"118","messageId":"119","endLine":18,"endColumn":29},{"ruleId":"128","severity":1,"message":"129","line":24,"column":6,"nodeType":"130","endLine":24,"endColumn":18,"suggestions":"131"},{"ruleId":"132","severity":1,"message":"133","line":81,"column":38,"nodeType":"134","messageId":"135","endLine":81,"endColumn":40},{"ruleId":"116","severity":1,"message":"136","line":6,"column":10,"nodeType":"118","messageId":"119","endLine":6,"endColumn":20},{"ruleId":"116","severity":1,"message":"137","line":11,"column":9,"nodeType":"118","messageId":"119","endLine":11,"endColumn":14},{"ruleId":"116","severity":1,"message":"138","line":12,"column":10,"nodeType":"118","messageId":"119","endLine":12,"endColumn":19},{"ruleId":"116","severity":1,"message":"139","line":12,"column":21,"nodeType":"118","messageId":"119","endLine":12,"endColumn":29},{"ruleId":"116","severity":1,"message":"125","line":16,"column":5,"nodeType":"118","messageId":"119","endLine":16,"endColumn":11},{"ruleId":"128","severity":1,"message":"129","line":24,"column":6,"nodeType":"130","endLine":24,"endColumn":8,"suggestions":"140"},{"ruleId":"132","severity":1,"message":"133","line":59,"column":124,"nodeType":"134","messageId":"135","endLine":59,"endColumn":126},{"ruleId":"116","severity":1,"message":"117","line":1,"column":35,"nodeType":"118","messageId":"119","endLine":1,"endColumn":44},{"ruleId":"116","severity":1,"message":"141","line":25,"column":11,"nodeType":"118","messageId":"119","endLine":25,"endColumn":21},{"ruleId":"116","severity":1,"message":"125","line":25,"column":23,"nodeType":"118","messageId":"119","endLine":25,"endColumn":29},{"ruleId":"116","severity":1,"message":"142","line":28,"column":10,"nodeType":"118","messageId":"119","endLine":28,"endColumn":19},{"ruleId":"116","severity":1,"message":"143","line":40,"column":13,"nodeType":"118","messageId":"119","endLine":40,"endColumn":18},{"ruleId":"128","severity":1,"message":"129","line":37,"column":6,"nodeType":"130","endLine":37,"endColumn":8,"suggestions":"144"},{"ruleId":"132","severity":1,"message":"133","line":107,"column":21,"nodeType":"134","messageId":"135","endLine":107,"endColumn":23},{"ruleId":"132","severity":1,"message":"133","line":139,"column":14,"nodeType":"134","messageId":"135","endLine":139,"endColumn":16},{"ruleId":"116","severity":1,"message":"145","line":181,"column":10,"nodeType":"118","messageId":"119","endLine":181,"endColumn":16},{"ruleId":"116","severity":1,"message":"146","line":181,"column":18,"nodeType":"118","messageId":"119","endLine":181,"endColumn":26},{"ruleId":"116","severity":1,"message":"138","line":182,"column":10,"nodeType":"118","messageId":"119","endLine":182,"endColumn":19},{"ruleId":"116","severity":1,"message":"139","line":182,"column":21,"nodeType":"118","messageId":"119","endLine":182,"endColumn":29},{"ruleId":"132","severity":1,"message":"133","line":250,"column":23,"nodeType":"134","messageId":"135","endLine":250,"endColumn":25},{"ruleId":"132","severity":1,"message":"133","line":289,"column":23,"nodeType":"134","messageId":"135","endLine":289,"endColumn":25},{"ruleId":"147","severity":1,"message":"148","line":35,"column":39,"nodeType":"149","messageId":"150","endLine":35,"endColumn":100},{"ruleId":"116","severity":1,"message":"123","line":1,"column":16,"nodeType":"118","messageId":"119","endLine":1,"endColumn":24},{"ruleId":"116","severity":1,"message":"151","line":17,"column":13,"nodeType":"118","messageId":"119","endLine":17,"endColumn":17},{"ruleId":"116","severity":1,"message":"138","line":58,"column":10,"nodeType":"118","messageId":"119","endLine":58,"endColumn":19},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Creater' is defined but never used.","'errorMessage' is assigned a value but never used.","'useState' is defined but never used.","'useContext' is defined but never used.","'signer' is assigned a value but never used.","'connect' is assigned a value but never used.","'setcontect' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadNFT'. Either include it or remove the dependency array.","ArrayExpression",["154"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'nftaddress' is defined but never used.","'route' is assigned a value but never used.","'sellPrice' is assigned a value but never used.","'setSells' is assigned a value but never used.",["155"],"'connection' is assigned a value but never used.","'selecfile' is assigned a value but never used.","'files' is assigned a value but never used.",["156"],"'prices' is assigned a value but never used.","'setPrice' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'view' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"159","fix":"161"},"Update the dependencies array to be: [connection, loadNFT]",{"range":"162","text":"163"},"Update the dependencies array to be: [loadNFT]",{"range":"164","text":"165"},{"range":"166","text":"165"},[542,554],"[connection, loadNFT]",[595,597],"[loadNFT]",[873,875]]